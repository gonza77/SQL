# Inner Join, Outer Join, Left Outer Join, Right Outer Join
# I see you inserted new rows in EmployeeDemographics and created WareHouseEmployeeDemographics, but you did not put the code on Git. I will let it here, hope it helps:

Table 1 Insert:

Insert into EmployeeDemographics VALUES

(1011, 'Ryan', 'Howard', 26, 'Male'),

(NULL, 'Holly', 'Flax', NULL, NULL),

(1013, 'Darryl', 'Philbin', NULL, 'Male')



Table 3 Query:

Create Table WareHouseEmployeeDemographics 

(EmployeeID int, 

FirstName varchar(50), 

LastName varchar(50), 

Age int, 

Gender varchar(50)

)



Table 3 Insert:

Insert into WareHouseEmployeeDemographics VALUES

(1013, 'Darryl', 'Philbin', NULL, 'Male'),

(1050, 'Roy', 'Anderson', 31, 'Male'),

(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),

(1052, 'Val', 'Johnson', 31, 'Female')



SELECT *
FROM EmployeesDemographics
Inner Join EmployeeSalary
	ON EmployeesDemographics.EmployeeID = EmployeeSalary.EmployeeID

SELECT *
FROM EmployeesDemographics
Left Outer Join EmployeeSalary
	ON EmployeesDemographics.EmployeeID = EmployeeSalary.EmployeeID


SELECT EmployeesDemographics.EmployeeID, Firstname, Lastname, Salary
FROM EmployeesDemographics
Inner Join EmployeeSalary
	ON EmployeesDemographics.EmployeeID = EmployeeSalary.EmployeeID



SELECT EmployeesDemographics.EmployeeID, Firstname, Lastname, Salary
FROM EmployeesDemographics
Inner Join EmployeeSalary
	ON EmployeesDemographics.EmployeeID = EmployeeSalary.EmployeeID
Where FirstName <> 'Michael'
Order By Salary DESC

SELECT JobTitle, AVG(Salary)
FROM EmployeesDemographics
Inner Join EmployeeSalary
	ON EmployeesDemographics.EmployeeID = EmployeeSalary.EmployeeID
WHERE JobTitle = 'Salesman'
GROUP BY JobTitle

#CASE

Select FirstName, LastName, Age,
CASE
WHEN Age > 30 THEN 'Adult'
WHEN AGE BETWEEN 27 AND 30 THEN 'Young'
ELSE 'Novice'
END
From SQL_Tutorial.dbo.EmployeesDemographics
Where age is not null
ORDER BY Age


SELECT FirstName, Lastname, Jobtitle, Salary,
CASE
WHEN JobTitle = 'Salesman' THEN Salary + (Salary*.10)
WHEN JobTitle = 'Accountant' THEN Salary + (Salary*.05)
WHEN JobTitle = 'HR' THEN Salary + (salary*.01)
ELSE Salary + (Salary*.03)
END AS SalaryAfterRaise
FROM EmployeesDemographics
JOIN EmployeeSalary
ON EmployeesDemographics.EmployeeID = EmployeeSalary.EmployeeID


#Having

SELECT JobTitle, COUNT(JobTitle)
FROM EmployeeSalary
JOIN EmployeesDemographics
ON EmployeeSalary.EmployeeID = EmployeesDemographics.EmployeeID
GROUP BY JobTitle
HAVING COUNT(JobTitle) > 1


SELECT JobTitle, AVG(Salary)
FROM EmployeeSalary
JOIN EmployeesDemographics
ON EmployeeSalary.EmployeeID = EmployeesDemographics.EmployeeID
GROUP BY JobTitle
HAVING AVG(Salary) > 45000
ORDER BY AVG(Salary) DESC



## UPDATING AND DELETING DATA IN A TABLE
-- INSERT INTO >> is going to create a new row
-- UPDATE >> is going to alter an pre existing row
-- DELETE

SELECT *
FROM EmployeesDemographics
UPDATE EmployeesDemographics
SET EmployeeID = 1012, Age = 31, Gender = 'Female'
WHERE FirstName = 'Holly' AND LastName = 'Flax'

-- Remember once you delete a row there is no way to get it back, so be careful, you'd better use first SELECT * FROM.. WHERE....to be sure
DELETE FROM EmployeesDemographics
WHERE EmployeeID = 1005

##ALIASING - you can write AS or don't write it, --Don't use letters aliasing, the can be pretty confusing

SELECT FirstName FSK
FROM EmployeesDemographics


SELECT FirstName + ' ' + LastName AS Fullname
FROM EmployeesDemographics

SELECT Demo.EmployeeID
FROM [SQL_Tutorial].[dbo].[EmployeesDemographics] as Demo

SELECT Demo.EmployeeID, Sal.Salary
FROM [SQL_Tutorial].[dbo].[EmployeesDemographics] as Demo
JOIN EmployeeSalary AS Sal
	ON Demo.EmployeeID = Sal.EmployeeID

--PARTITION BY, GROUP BY reduces the number of rows in our output

SELECT FirstName, LastName, Gender, Salary
, COUNT(Gender) OVER (PARTITION BY Gender) as TotalGender
FROM EmployeeSalary AS SAL
JOIN EmployeesDemographics AS DEMO
ON Sal.EmployeeID = Demo.EmployeeID






